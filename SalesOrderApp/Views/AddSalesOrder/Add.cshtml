@model SalesOrderApp.Models.SalesOrder
@{
    ViewData["Title"] = "Add Sales Order";
}

<div class="container mx-auto p-8 bg-gray-50 rounded-lg shadow-md">
    <h1 class="text-3xl font-bold mb-6 text-center text-gray-800">Add Sales Order</h1>

    <form asp-action="Add" method="post" id="salesOrderForm" class="space-y-6">
        <!-- Main Sales Order Fields -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <div class="flex flex-col">
                <label asp-for="SalesOrderNo" class="text-gray-600 font-semibold mb-1">Sales Order No.</label>
                <input asp-for="SalesOrderNo" class="form-input" readonly />
            </div>
           
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div class="flex flex-col">
                <label asp-for="CustomerId" class="text-gray-600 font-semibold mb-1">Select Customer<span class="text-red-500">*</span></label>
                <select asp-for="CustomerId" class="form-select" required>
                    <option value="">Select</option>
                    <option value="1">Customer A</option>
                    <option value="2">Customer B</option>
                    <option value="3">Customer C</option>
                    <option value="4">Customer D</option>
                </select>
            </div>
            <br />
            <div class="flex flex-col">
                <label asp-for="PaymentTerms" class="text-gray-600 font-semibold mb-1">Payment Terms</label>
                <select asp-for="PaymentTerms" class="form-select">
                    <option value="">Select</option>
                    <option value="Cash">Cash</option>
                    <option value="Banking">Banking</option>
                    <option value="Net 60">Net 60</option>
                </select>
            </div>
        </div>

        <!-- Sales Order Item Section -->
        <div class="border-t border-b border-gray-300 py-6">
            <h2 class="text-2xl font-semibold mb-4 text-gray-800">Add Products</h2>
            <div class="grid grid-cols-1 md:grid-cols-6 gap-4 items-end" id="itemInputRow">
                <div class="col-span-1 md:col-span-2">
                    <label for="productName" class="text-gray-600 font-semibold mb-1">Product Name</label>
                    <select id="productName" class="form-select w-full">
                        <option value="">Select</option>
                        <option value="Product X">Product X</option>
                        <option value="Product Y">Product Y</option>
                        <option value="Product X">Product Z</option>
                    </select>
                </div>
                <div class="col-span-1 md:col-span-1">
                    <label for="additionalInfo" class="text-gray-600 font-semibold mb-1">Additional Info</label>
                    <textarea id="additionalInfo" class="form-input w-full resize-none h-10"></textarea>
                </div>
                <div class="col-span-1 md:col-span-1">
                    <label for="qty" class="text-gray-600 font-semibold mb-1">Qty</label>
                    <input type="number" id="qty" class="form-input w-full" value="0" min="0" />
                </div>
                <div class="col-span-1 md:col-span-1">
                    <label for="rate" class="text-gray-600 font-semibold mb-1">Rate</label>
                    <input type="number" step="0.01" id="rate" class="form-input w-full" value="0.00" min="0" />
                </div>
                <div class="col-span-1 md:col-span-1">
                    <label for="amount" class="text-gray-600 font-semibold mb-1">Amount</label>
                    <input type="number" step="0.01" id="amount" class="form-input w-full" value="0.00" readonly />
                </div>
                <div>
                    <button type="button" id="addItemBtn" class="bg-blue-500 text-white font-bold py-2 px-4 rounded-full hover:bg-blue-600 transition duration-300 ease-in-out">Add</button>
                </div>
            </div>
        </div>

        <!-- Sales Order Items Table -->
        <div class="overflow-x-auto">
            <table class="min-w-full bg-white rounded-lg shadow-md mt-6">
                <thead>
                    <tr class="text-left font-semibold text-gray-700 bg-gray-200">
                        <th class="py-3 px-4">Sr.No</th>
                        <th class="py-3 px-4">Product Name</th>
                        <th class="py-3 px-4">Additional Info</th>
                        <th class="py-3 px-4">Qty</th>
                        <th class="py-3 px-4">Rate</th>
                        <th class="py-3 px-4">Amount</th>
                        <th class="py-3 px-4">Delete</th>
                    </tr>
                </thead>
                <tbody id="itemsTableBody">
                    <!-- Items will be added here by JavaScript -->
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5" class="py-3 px-4 text-right font-bold text-gray-800">Totals:</td>
                        <td class="py-3 px-4 font-bold text-right text-gray-800" id="totalAmount">0.00</td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>

        <!-- Hidden input fields for form submission -->
        <div id="hiddenInputsContainer"></div>

        <div class="flex justify-end">
            <button type="submit" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-full shadow-lg hover:bg-blue-700 transition duration-300 ease-in-out mt-6">Submit</button>
        </div>
    </form>
</div>

<!-- Tailwind CSS and JavaScript -->
<script src="https://cdn.tailwindcss.com"></script>

    <style>
        .form-input, .form-select {
            /* Replaced  with standard CSS properties for Tailwind-like styling */
            display: block;
            width: 100%;
            padding-left: 1rem;
            padding-right: 1rem;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            color: #4B5563; /* text-gray-700 */
            background-color: #fff;
            border: 1px solid #D1D5DB; /* border-gray-300 */
            border-radius: 0.375rem; /* rounded-md */
            box-shadow: 0 1px 2px 0 rgba(0,0,0,0.05); /* shadow-sm */
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        .form-input:focus, .form-select:focus {
            border-color: #3B82F6; /* focus:border-blue-500 */
            box-shadow: 0 0 0 2px #BFDBFE; /* focus:ring-blue-200 */
        }
        .form-input:read-only {
            background-color: #E5E7EB; /* bg-gray-200 */
            cursor: not-allowed;
        }
    </style>
    
    
<!-- Remove the invalid  directive and use standard CSS instead -->
<style>
    .form-input, .form-select {
        display: block;
        width: 100%;
        padding-left: 1rem;
        padding-right: 1rem;
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        color: #4B5563; /* text-gray-700 */
        background-color: #fff;
        border: 1px solid #D1D5DB; /* border-gray-300 */
        border-radius: 0.375rem; /* rounded-md */
        box-shadow: 0 1px 2px 0 rgba(0,0,0,0.05); /* shadow-sm */
        transition: border-color 0.2s, box-shadow 0.2s;
    }
    .form-input:focus, .form-select:focus {
        border-color: #3B82F6; /* focus:border-blue-500 */
        box-shadow: 0 0 0 2px #BFDBFE; /* focus:ring-blue-200 */
    }
    .form-input:read-only {
        background-color: #E5E7EB; /* bg-gray-200 */
        cursor: not-allowed;
    }
</style>
    

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const addItemBtn = document.getElementById('addItemBtn');
        const itemsTableBody = document.getElementById('itemsTableBody');
        const hiddenInputsContainer = document.getElementById('hiddenInputsContainer');
        const totalAmountCell = document.getElementById('totalAmount');

        const productNameInput = document.getElementById('productName');
        const additionalInfoInput = document.getElementById('additionalInfo');
        const qtyInput = document.getElementById('qty');
        const rateInput = document.getElementById('rate');
        const amountInput = document.getElementById('amount');

        let itemIndex = 0;

        // Function to update the amount based on quantity and rate
        const updateAmount = () => {
            const qty = parseFloat(qtyInput.value) || 0;
            const rate = parseFloat(rateInput.value) || 0;
            amountInput.value = (qty * rate).toFixed(2);
        };

        // Event listeners for Quantity and Rate
        qtyInput.addEventListener('input', updateAmount);
        rateInput.addEventListener('input', updateAmount);

        // Event listener for Product Name change to auto-populate rate
        productNameInput.addEventListener('change', () => {
            const selectedOption = productNameInput.options[productNameInput.selectedIndex];
            const rate = selectedOption.getAttribute('data-rate');
            if (rate) {
                rateInput.value = parseFloat(rate).toFixed(2);
            }
            updateAmount();
        });

        // Function to calculate and update total amount
        const updateTotals = () => {
            let total = 0;
            document.querySelectorAll('input[name^="Items"][name$="Amount"]').forEach(input => {
                total += parseFloat(input.value) || 0;
            });
            totalAmountCell.textContent = total.toFixed(2);
        };

        // Add item to table and hidden inputs
        addItemBtn.addEventListener('click', () => {
            const productName = productNameInput.value;
            const additionalInfo = additionalInfoInput.value;
            const qty = parseFloat(qtyInput.value) || 0;
            const rate = parseFloat(rateInput.value) || 0;
            const amount = parseFloat(amountInput.value) || 0;

            if (productName && qty > 0) {
                // Add item to the table
                const newRow = document.createElement('tr');
                newRow.innerHTML = `
                    <td class="py-3 px-4 border-b border-gray-200">${itemIndex + 1}</td>
                    <td class="py-3 px-4 border-b border-gray-200">${productName}</td>
                    <td class="py-3 px-4 border-b border-gray-200">${additionalInfo}</td>
                    <td class="py-3 px-4 border-b border-gray-200">${qty}</td>
                    <td class="py-3 px-4 border-b border-gray-200">${rate.toFixed(2)}</td>
                    <td class="py-3 px-4 border-b border-gray-200">${amount.toFixed(2)}</td>
                    <td class="py-3 px-4 border-b border-gray-200">
                        <button type="button" class="text-red-500 hover:text-red-700 delete-item">Delete</button>
                    </td>
                `;
                itemsTableBody.appendChild(newRow);

                // Add hidden inputs to the form for model binding
                hiddenInputsContainer.innerHTML += `
                    <input type="hidden" name="Items[${itemIndex}].ProductName" value="${productName}" />
                    <input type="hidden" name="Items[${itemIndex}].AdditionalInfo" value="${additionalInfo}" />
                    <input type="hidden" name="Items[${itemIndex}].Qty" value="${qty}" />
                    <input type="hidden" name="Items[${itemIndex}].Rate" value="${rate}" />
                    <input type="hidden" name="Items[${itemIndex}].Amount" value="${amount}" />
                `;

                // Clear input fields for the next item
                productNameInput.value = "";
                additionalInfoInput.value = "";
                qtyInput.value = 0;
                rateInput.value = 0;
                amountInput.value = 0;
                itemIndex++;
                updateTotals();
            }
        });

        // Delegate deletion logic to a parent element
        itemsTableBody.addEventListener('click', (e) => {
            if (e.target.classList.contains('delete-item')) {
                const row = e.target.closest('tr');
                const rowIndex = Array.from(itemsTableBody.children).indexOf(row);

                // Remove the row from the table
                row.remove();

                // Remove the corresponding hidden inputs
                const inputsToRemove = Array.from(hiddenInputsContainer.children).slice(rowIndex * 5, (rowIndex * 5) + 5);
                inputsToRemove.forEach(input => input.remove());

                updateTotals();
            }
        });
    });
</script>
